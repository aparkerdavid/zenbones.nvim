local start_template = [[
(deftheme $n
  "generated by shipwright"
  :background-mode '$a
  :kind 'color-scheme
  :family 'zenbones)

(let ((class '((class color) (min-colors 89))))
   (custom-theme-set-faces
   '$n
]]

local end_template = [[))
(provide-theme '$n)
]]

local helpers = require "shipwright.transform.helpers"

local face_mappings = {
   cursor = specs.Cursor,
   default = specs.Normal,
   region = specs.Visual,
   highlight = specs.Visual,
   match = specs.Search,
   isearch = specs.CurSearch,
   warning = specs.WarningMsg,
   ["completions-common-part"] = specs.Search,
   ["corfu-current"] = specs.Visual,
   ["mode-line"] = specs.StatusLine,
   ["header-line"] = specs.StatusLineNC,
   ["mode-line-inactive"] = specs.StatusLineNC,
   ["ansi-color-bright-red"] = {fg = term.bright_red, bg = term.bright_red},
   ["ansi-color-bright-blue"] = {fg = term.bright_blue, bg = term.bright_blue},
   ["ansi-color-bright-green"] = {fg = term.bright_green, bg = term.bright_green},
   ["ansi-color-bright-cyan"] = {fg = term.bright_cyan, bg = term.bright_cyan},
   ["ansi-color-bright-magenta"] = {fg = term.bright_magenta, bg = term.bright_magenta},
   ["ansi-color-bright-yellow"] = {fg = term.bright_yellow, bg = term.bright_yellow},
   ["ansi-color-bright-white"] = {fg = term.bright_white, bg = term.bright_white},
   ["ansi-color-bright-black"] = {fg = term.bright_black, bg = term.bright_black},

   ["eshell-ls-backup"] = {fg = term.green},
   ["eshell-ls-archive"] = {fg = term.bright_blue},
   ["eshell-ls-clutter"] = {fg = term.cyan},
   ["eshell-ls-missing"] = {fg = term.red},
   ["eshell-ls-product"] = {fg = term.bright_yellow},
   ["eshell-ls-special"] = {fg = term.yellow},
   ["eshell-ls-symlink"] = {fg = term.bright_cyan},
   ["eshell-ls-readonly"] = {fg = term.bright_red},
   ["eshell-ls-directory"] = {fg = term.blue},
   ["eshell-ls-executable"] = {fg = term.bright_green},
   ["eshell-ls-unreadable"] = {fg = term.magenta},

   ["nerd-icons-red"] = { fg = term.red },
   ["nerd-icons-blue"] = { fg = term.blue },
   ["nerd-icons-cyan"] = { fg = term.cyan },
   ["nerd-icons-dred"] = { fg = term.red },
   ["nerd-icons-lred"] = { fg = term.red },
   ["nerd-icons-pink"] = { fg = term.magenta },
   ["nerd-icons-dblue"] = { fg = term.bright_blue },
   ["nerd-icons-dcyan"] = { fg = term.bright_cyan },
   ["nerd-icons-dpink"] = { fg = term.magenta },
   ["nerd-icons-green"] = { fg = term.green },
   ["nerd-icons-lblue"] = { fg = term.blue },
   ["nerd-icons-lcyan"] = { fg = term.cyan },
   ["nerd-icons-lpink"] = { fg = term.magenta },
   ["nerd-icons-dgreen"] = { fg = term.bright_green },
   ["nerd-icons-lgreen"] = { fg = term.green },
   ["nerd-icons-maroon"] = { fg = term.magenta },
   ["nerd-icons-orange"] = { fg = term.yellow },
   ["nerd-icons-purple"] = { fg = term.magenta },
   ["nerd-icons-silver"] = { fg = term.white },
   ["nerd-icons-yellow"] = { fg = term.yellow },
   ["nerd-icons-dmaroon"] = { fg = term.magenta },
   ["nerd-icons-dorange"] = { fg = term.yellow },
   ["nerd-icons-dpurple"] = { fg = term.magenta },
   ["nerd-icons-dsilver"] = { fg = term.bright_white },
   ["nerd-icons-dyellow"] = { fg = term.bright_yellow },
   ["nerd-icons-lmaroon"] = { fg = term.magenta },
   ["nerd-icons-lorange"] = { fg = term.yellow },
   ["nerd-icons-lpurple"] = { fg = term.magenta },
   ["nerd-icons-lsilver"] = { fg = term.white },
   ["nerd-icons-lyellow"] = { fg = term.yellow },
   ["nerd-icons-red-alt"] = { fg = term.red },
   ["nerd-icons-blue-alt"] = { fg = term.blue },
   ["nerd-icons-cyan-alt"] = { fg = term.cyan },
   ["nerd-icons-purple-alt"] = { fg = term.magenta },

   ["sh-heredoc"] = specs.String,
   ["sh-quoted-exec"] = specs.Normal,

   ["ansi-color-red"] = {fg = term.red, bg = term.red},
   ["ansi-color-blue"] = {fg = term.blue, bg = term.blue},
   ["ansi-color-green"] = {fg = term.green, bg = term.green},
   ["ansi-color-cyan"] = {fg = term.cyan, bg = term.cyan},
   ["ansi-color-magenta"] = {fg = term.magenta, bg = term.magenta},
   ["ansi-color-yellow"] = {fg = term.yellow, bg = term.yellow},
   ["ansi-color-white"] = {fg = term.white, bg = term.white},
   ["ansi-color-black"] = {fg = term.black, bg = term.black},
   ["evil-ex-substitute-replacement"] = specs.DiagnosticVirtualTextInfo,
   ["error"] = specs.Error,
   ["success"] = {fg = term.green},
   ["link"] = {fg = term.bright_blue, gui = "underline"},
   ["git-gutter:added"] = {fg = term.green},
   ["git-gutter:deleted"] = {fg = term.red},
   ["git-gutter:modified"] = {fg = term.blue},
   ["smerge-base"] = DiffChange,
   ["smerge-upper"] = DiffDelete,
   ["smerge-lower"] = DiffAdd,
   ["eshell-prompt"] = specs.Special,
   ["minibuffer-prompt"] = specs.Special,
   ["comint-highlight-prompt"] = specs.Special,
   ["flycheck-error"] = specs.DiagnosticVirtualTextError,
   ["flycheck-warning"] = specs.DiagnosticVirtualTextWarn,
   ["flycheck-info"] = specs.DiagnosticVirtualTextInfo,
   ["flymake-error"] = specs.DiagnosticVirtualTextError,
   ["flymake-warning"] = specs.DiagnosticVirtualTextWarn,
   ["flymake-note"] = specs.DiagnosticVirtualTextInfo,
   ["orderless-match-face-0"] = specs.CurSearch,
   ["orderless-match-face-1"] = specs.Search,
   ["orderless-match-face-2"] = specs.DiagnosticVirtualTextHint,
   ["orderless-match-face-3"] = specs.DiagnosticVirtualTextInfo,
   ["hl-line"] = specs.CursorLine,
   ["line-number"] = specs.LineNr,
   ["line-number-current-line"] = specs.CursorLineNr,
   ["window-divider"] = specs.Normal,
   ["fringe"] = specs.Normal,
   ["window-divider-first-pixel"] = specs.Normal,
   ["window-divider-last-pixel"] = specs.Normal,
   ["show-paren-match"] = specs.Search,
   ["show-paren-mismatch"] = {bg = term.red, fg = term.black},
   ["lazy-highlight"] = specs.Search,
   ["font-lock-delimiter-face"] = specs.Delimiter,
   ["font-lock-constant-face"] = specs.Special,
   ["font-lock-string-face"] = specs.String,
   ["font-lock-function-name-face"] = specs.Type,
   ["font-lock-function-call-face"] = specs.Function,
   ["font-lock-comment-face"] = specs.Comment,
   ["font-lock-builtin-face"] = specs.Special,
   ["font-lock-variable-name-face"] = specs.Identifier,
   ["font-lock-variable-use-face"] = specs.Identifier,
   ["font-lock-keyword-face"] = specs.Statement,
   ["font-lock-type-face"] = specs.Type,
   ["font-lock-preprocessor-face"] = specs.PreProc,
   ["rainbow-delimiters-base-face"] = specs.Delimiter,
   ["rainbow-delimiters-depth-1-face"] = {fg = specs.LineNr.fg.mix(specs.Normal.fg, 50)},
   ["rainbow-delimiters-depth-2-face"] = {fg = term.bright_magenta},
   ["rainbow-delimiters-depth-3-face"] = {fg = term.blue},
   ["rainbow-delimiters-depth-4-face"] = {fg = term.yellow},
   ["rainbow-delimiters-depth-5-face"] = {fg = term.red},
   ["rainbow-delimiters-depth-6-face"] = {fg = term.cyan},
   ["rainbow-delimiters-depth-7-face"] = {fg = term.magenta},
   ["rainbow-delimiters-depth-8-face"] = {fg = term.green},
   ["rainbow-delimiters-depth-9-face"] = {fg = term.bright_red},
   ["rainbow-delimiters-base-error-face"] = specs.DiagnosticVirtualTextError,
   ["magit-section-highlight"] = specs.CursorLine,
   ["diff-hl-delete"] = { fg = specs.DiffDelete.bg.mix(specs.GitSignsDelete.fg, 50), bg = specs.DiffDelete.bg.mix(specs.GitSignsDelete.fg, 50) },
   ["diff-hl-insert"] = { fg = specs.DiffAdd.bg.mix(specs.GitSignsAdd.fg, 50), bg = specs.DiffAdd.bg.mix(specs.GitSignsAdd.fg, 50) },
   ["diff-hl-change"] = { fg = specs.DiffChange.bg.mix(specs.GitSignsChange.fg, 50), bg = specs.DiffChange.bg.mix(specs.GitSignsChange.fg, 50) },
   ["magit-diff-removed"] = specs.DiffDelete,
   ["magit-diff-removed-highlight"] = {bg = specs.DiffDelete.bg, fg = specs.GitSignsDelete.fg},
   ["magit-diff-added"] = specs.DiffAdd,
   ["magit-diff-added-highlight"] = {bg = specs.DiffAdd.bg, fg = specs.GitSignsAdd.fg},
   ["magit-diff-base"] = specs.DiffChange,
   ["magit-diff-base-highlight"] = {bg = specs.DiffChange.bg, fg = specs.GitSignsChange.fg},
   ["magit-diff-whitespace-warning"] = {bg = term.bright_red},
   ["magit-diff-hunk-heading"] = specs.StatusLineNC,
   ["magit-diff-hunk-heading-highlight"] = specs.StatusLine,
   ["magit-diff-lines-heading"] = specs.CurSearch,
}


local function create_face(name)
   local face = {}
   face.body = ""

   function face.append(self, val)
      local prefix = " "
      if self.body == "" then
         prefix = name .. " ((,class ("
      end
      self.body = self.body .. prefix .. val
   end

   function face.print(self)
      return " `(" .. self.body .. "))))"
   end

   return face
end

local function create_emacs_theme(name)
   return function(colorscheme)
      local specs, term = unpack(colorscheme)
	  local appearance = "light"
	  if specs.Normal.fg.l > specs.Normal.bg.l then
		  appearance = "dark"
	  end

      spec_str = ""

      for k, v in pairs(specs) do
         spec_str = spec_str .. ";; "
         spec_str = spec_str .. k
         spec_str = spec_str .. ": "
         spec_str = spec_str .. vim.fn.json_encode(v)
         spec_str = spec_str .. "\n"
      end

      for k, v in pairs(term) do
         spec_str = spec_str .. ";; "
         spec_str = spec_str .. k
         spec_str = spec_str .. ": "
         spec_str = spec_str .. vim.fn.json_encode(v)
         spec_str = spec_str .. "\n"
      end
      for k, v in pairs(face_mappings) do
         local face = create_face(k)

         if v.fg then
            face:append(":foreground")
            face:append('"' .. v.fg .. '"')
         end

         if v.bg then
            face:append(":background")
            face:append('"' .. v.bg .. '"')
         end

         if v.gui and string.find(v.gui, "bold") then
            face:append(":bold")
            face:append("'t")
         end

         if v.gui and string.find(v.gui, "underline") then
            face:append(":underline")
            face:append("'t")
         end

         if v.gui and string.find(v.gui, "italic") then
            face:append(":italic")
            face:append("'t")
         end

         spec_str = spec_str .. face:print() .. "\n"
      end

      template = helpers.apply_template(start_template, { n = name:gsub("_", "-"), a = appearance }) .. spec_str .. helpers.apply_template(end_template, { n = name:gsub("_", "-") })

      return { template }
   end
end

---@diagnostic disable: undefined-global
-- selene: allow(undefined_variable)

run({ specs, term }, create_emacs_theme(name), { overwrite, string.format("extras/emacs/%s-theme.el", name:gsub("_", "-")) })
-- selene: deny(undefined_variable)
---@diagnostic enable: undefined-global
